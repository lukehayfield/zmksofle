/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        snap_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        TEST: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>;
            label = "NEW_MACRO";
        };
    };

    behaviors {
        ht_tp: ht_tp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_TP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <350>;
            quick-tap-ms = <300>;
        };

        ht_mo: ht_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            flavor = "balanced";
        };

        td_ls: td_ls {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LEFT_BRACE>, <&kp LEFT_BRACKET>;
        };

        td_rs: td_rs {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RS";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_SHIFT>,
                <&kp RIGHT_BRACE>,
                <&kp RIGHT_BRACKET>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "LUKE";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESC    &mt LS(N1) N1   &ht_tp AT_SIGN N2  &ht_tp POUND N3  &ht_tp DOLLAR N4  &ht_tp PERCENT N5                                  &ht_tp CARET N6  &ht_tp AMPERSAND N7      &ht_tp ASTERISK N8      &ht_tp LEFT_PARENTHESIS N9  &ht_tp RIGHT_PARENTHESIS N0  &ht_tp K_POWER HASH
&kp TAB    &kp Q           &kp W              &kp E            &kp R             &kp T                                              &kp Y            &kp U                    &kp I                   &kp O                       &ht_tp LG(P) P               &kp BACKSPACE
&kp GRAVE  &ht_tp LG(A) A  &ht_tp LG(S) S     &kp D            &ht_tp LG(F) F    &kp G                                              &kp H            &kp J                    &kp K                   &kp L                       &ht_tp COLON SEMI            &ht_tp DOUBLE_QUOTES SQT
&td_ls     &mt LG(Z) Z     &ht_tp LG(X) X     &ht_tp LG(C) C   &ht_tp LG(V) V    &kp B              &kp C_PLAY_PAUSE    &kp C_NEXT  &kp N            &kp M                    &ht_tp LESS_THAN COMMA  &ht_tp GREATER_THAN DOT     &ht_tp QUESTION FSLH         &td_rs
                           &kp LEFT_CONTROL   &kp LALT         &kp LEFT_GUI      &ht_mo 1 RET       &kp SPACE           &kp SPACE   &ht_mo 2 RET     &ht_tp UNDERSCORE MINUS  &ht_tp PLUS EQUAL       &ht_tp PIPE BACKSLASH
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp LC(LEFT) LC(RIGHT)>;
        };

        symbol_layer {
            display-name = "SYMBOL";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &kp C_REWIND  &kp C_PLAY_PAUSE  &kp C_FAST_FORWARD  &kp C_MUTE         &kp K_VOLUME_DOWN  &kp C_VOLUME_UP
&none       &kp LG(LC(Q))  &none         &none         &none         &none                           &none         &kp LA(LC(U))     &kp LA(LC(UP))      &kp LA(LC(I))      &kp LA(LC(E))      &kp LA(LC(D))
&none       &none          &none         &none         &none         &none                           &none         &kp LA(LC(LEFT))  &kp LA(LC(RET))     &kp LA(LC(RIGHT))  &none              &kp LA(LC(F))
&none       &none          &none         &none         &none         &none         &none     &none   &none         &kp LA(LC(J))     &kp LA(LC(DOWN))    &kp LA(LC(K))      &kp LA(LC(T))      &kp LA(LC(G))
                           &none         &none         &none         &trans        &trans    &trans  &trans        &kp LC(LEFT)      &kp LC(RIGHT)       &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        hotkey_layer {
            display-name = "HOTKEY";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans    &trans        &trans         &trans     &trans
&trans          &kp INS       &kp PSCRN     &kp K_CMENU   &none         &none                           &kp PG_UP  &kp HOME  &kp UP        &kp END        &kp LG(P)  &kp LG(LS(K))
&trans          &kp LG(A)     &kp LG(S)     &kp LG(D)     &kp LG(F)     &kp CLCK                        &kp PG_DN  &kp LEFT  &kp DOWN      &kp RIGHT      &kp DEL    &kp BSPC
&kp LEFT_BRACE  &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp LG(B)     &trans    &trans  &none      &none     &kp LC(LEFT)  &kp LC(RIGHT)  &none      &kp RIGHT_BRACE
                              &trans        &trans        &trans        &trans        &trans    &trans  &trans     &trans    &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        snap_layer {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            display-name = "SNAP";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none   &none             &none             &none              &none  &to 4
&ext_power EP_TOG  &none         &none         &none         &none         &none                         &none   &kp LA(LC(U))     &kp LA(LC(UP))    &kp LA(LC(I))      &none  &none
&none              &none         &none         &none         &none         &none                         &none   &kp LA(LC(LEFT))  &kp LA(LC(RET))   &kp LA(LC(RIGHT))  &none  &none
&none              &none         &none         &none         &none         &none         &none    &none  &none   &kp LA(LC(J))     &kp LA(LC(DOWN))  &kp LA(LC(K))      &none  &none
                                 &none         &none         &none         &trans        &none    &none  &trans  &none             &none             &none
            >;
        };

        gaming_layer {
            display-name = "GAMING";
            bindings = <
&kp ESC    &kp N1  &kp N2            &kp N3    &kp N4        &kp N5                                        &kp N6        &kp N7    &kp N8     &kp N9     &kp N0    &to 0
&kp TAB    &kp Q   &kp W             &kp E     &kp R         &kp T                                         &kp Y         &kp U     &kp I      &kp O      &kp P     &kp BACKSPACE
&kp GRAVE  &kp A   &kp S             &kp D     &kp F         &kp G                                         &kp H         &kp J     &kp K      &kp L      &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X             &kp C     &kp V         &kp B         &kp C_PLAY_PAUSE    &kp C_NEXT  &kp N         &kp M     &kp COMMA  &kp DOT    &kp FSLH  &kp RSHFT
                   &kp LEFT_CONTROL  &kp LALT  &kp LEFT_GUI  &ht_mo 1 RET  &kp SPACE           &kp SPACE   &ht_mo 2 RET  &kp LBKT  &kp RBKT   &kp MINUS
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp LC(LEFT) LC(RIGHT)>;
        };
    };
};
